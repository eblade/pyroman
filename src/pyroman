#!/usr/bin/python

import os
import sys
import io
from optparse import OptionParser

import G

from Utils import getkey
from Processor import Processor

usage = "usage: %prog [options] infile [outfile]"
parser = OptionParser(usage=usage)
parser.add_option('-f', '--format', dest="format", default='html',		 
                  help='output format [default and only option is html]')
parser.add_option('-a', '--author', dest="author", default=None,		 
                  help='document author')
parser.add_option('-d', '--output-dir', dest="output_dir", default='/tmp',
                  help='output directory unless outfile is given [default is /tmp]')
parser.add_option('-F', '--final', dest="final", default=False,		 
                  action="store_true",
                  help='render doc as final (no comments)')
(options, args) = parser.parse_args()

if len(args) < 1:
    G.error("No filename specified")
    exit(1)

filename = args[0] 
outfile = args[1] if len(args) > 1 else ''.join([options.output_dir,'/', filename,'.html'])



if options.format == 'json':
    json_mode = True
    options.format = 'html'
else:
    json_mode = False

p = Processor('', filename, options.format, True, outfile)

if options.final:
    p.globalvars['state'] = 'final'
else:
    p.globalvars['state'] = 'draft'

if options.author:
    p.globalvars['author'] = options.author

p.generate()

#print p.get_text()

if not json_mode:
    html = io.open(outfile, 'w')
    html.write(p.get_text())
    html.close()
else:
    import json
    outfile = os.path.splitext(outfile)[0]
    d = {
        'filename': filename,
        'outfile': outfile[:5],
        'headers': p.to_dict(),
        'objects': p.get_objects_as_list(),
    }
    outfile += '.json'
    with open(outfile, 'w') as jsonfile:
        json.dump(d, jsonfile, indent=2, sort_keys=True)
    

p.postprocess_objects()

f = io.open(G.log_dir+'/objectdump','w')
f.write(unicode(p.get_objects_as_string()))
f.close()

G.close_log()

print "Wrote results to", outfile
